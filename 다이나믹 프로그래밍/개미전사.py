"""
개미 전사는 부족한 식량을 충당하고자 메뚜기 식량창고를 몰래 공격하려 한다.
메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있다.
각 식량창고에는 정해진 수의 식량이 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 뺏을 예정이다.
이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중 서로 인접한 식량창고가 공격받으면 바로 알아낼 수 있다.
(연속된 칸의 창고를 털 수 없다.)
따라서 개미전사는 정찰병에게 들키지 않고 약탈하기 위해 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다.

예시 : 
식량 창고는 다음과 같이 주어진다.
1 3 1 5

이 경우 개미는 두 번째, 네 번째 식량창고를 선택시 최대값인 8개의 식량을 뺏을 수 있다.
식량 창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하라.

첫째 줄에 식량 창고 개수 N이 주어진다.
둘째 줄에 공백을 기준으로 저장된 식량의 개수가 주어진다.
4
1 3 1 5 
답 : 8

식량의 최댓값을 출력하라.
"""

n = int(input())
array = list(map(int, input().split()))

# n은 최대 100, 앞서 계산된 결과 저장을 위한 DP테이블 초기화
d = [0] * 100

# DP 진행 - 바텀업
d[0] = array[0]
# 두번째 위치까지 얻을 수 있는 식량의 최대값은 첫번째, 두번째 중 최댓값(둘 중 하나만 고를 수 있으므로)
d[1] = max(array[0], array[1])

# 3~n번째 항에 대해 모든 optimal solution을 구한다.
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

print(d[n - 1])
