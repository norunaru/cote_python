# 바텀업 방식

N = int(input())
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 테이블 , 각 인덱스에 저장된 값은 인덱스까지 털었을때 최대값을 의미
d = [0] * 100

d[0] = array[0]
d[1] = max(array[0], array[1])

for i in range(2, N):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

print(d[N - 1])

"""
i번째를 처리할 때 최댓값은 i-1, i-2 + i번째 값중 더 큰 값이다.
1,2,3, ... 앞에서부터 차례로 그 위치까지의 최댓값을 구할때 -1, -2번째의 값을 통해 i번째 위치의 최댓값을 얻는다.
작은 문제들의 값으로 큰 문제의 값을 얻고, 반복적인 작업을 수행하므로 다이나믹 프로그래밍을 적용할 수 있다.
"""
